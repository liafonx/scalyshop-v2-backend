image: alpine:latest

variables:
  AUTO_BUILD_IMAGE_VERSION: 'v4.3.0'
  DOCKER_HOST: tcp://0.0.0.0:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''

stages:
  - build
  - deploy

build-job:
  stage: build
  image: 'registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:${AUTO_BUILD_IMAGE_VERSION}'
  services:
    - name: 'docker:24.0.5-dind'
      variables:
        HEALTHCHECK_TCP_PORT: "2375"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - |
      docker images --format '{{.Repository}} {{.Tag}} {{.ID}}' | while read repo tag id; do
        if [ "$tag" != "$CI_COMMIT_SHORT_SHA" ] && [ "$tag" != "latest" ]; then
          echo "Removing image $repo:$tag ($id)"
          docker rmi -f "$id"
        else
          echo "Keeping image $repo:$tag ($id)"
        fi
      done
  rules:
    - if: $CI_COMMIT_BRANCH == "backend-local"

# test-job:
#   TODO

deploy-helm:
  stage: deploy
  image: dtzar/helm-kubectl
  dependencies:
    - build-job
  before_script:
    # Decode the base64-encoded kubeconfig from CI/CD variable and set it for kubectl/helm.
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
  script:
    - echo "Deploying the application using Helm upgrade --install..."
    - echo "Using image ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
    - |
      helm upgrade --install scalyshop-backend ./scalyshop-backend \
        --set image.repository=$CI_REGISTRY_IMAGE \
        --set image.tag=$CI_COMMIT_SHORT_SHA
    - kubectl wait --for=condition=Available --timeout=60s deployment/scalyshop-backend -n scalyshop
  rules:
    - if: $CI_COMMIT_BRANCH == "backend-local"