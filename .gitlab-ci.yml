image: alpine:latest

variables:
  AUTO_BUILD_IMAGE_VERSION: "v4.3.0"
  DOCKER_HOST: tcp://0.0.0.0:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_APPLICATION_TAG: $CI_COMMIT_SHORT_SHA # Use the commit short SHA as Docker image tag

stages:
  - build
  - test
  - deploy

.default_rules: &default_rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "feat-ci"

build-job:
  <<: *default_rules
  stage: build
  image: "${CI_TEMPLATE_REGISTRY_HOST}/gitlab-org/cluster-integration/auto-build-image:${AUTO_BUILD_IMAGE_VERSION}"
  services:
    - name: "docker:20.10.12-dind"
      command: ["--tls=false", "--host=tcp://0.0.0.0:2375"]
  before_script:
    - chmod +x build/build.sh
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHORT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - build/build.sh

test-job:
  <<: *default_rules
  stage: test
  image: node:latest
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  variables:
    MONGODB_HOST: "mongodb.default.svc.cluster.local"
    BACKEND_PORT: 5000
    MONGODB_USER: "scaly"
    MONGODB_PW: "scalypw"
  script:
    - echo "Running test..."
    - npm install
    - npm test
  when: on_success

deploy-job:
  <<: *default_rules
  stage: deploy
  image: alpine/helm:latest
  script: # Use Helm to deploy the backend
    - echo "Deploying application with Helm..."
    - |
      helm upgrade --install scalyshop-backend ./scalyshop-backend \
        --set image.repository=$CI_REGISTRY_IMAGE \
        --set image.tag=$CI_APPLICATION_TAG \
        --namespace scalyshop \
        --wait --timeout 300s --debug
  when: on_success
