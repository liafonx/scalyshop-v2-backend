#image: alpine:latest

variables:
  AUTO_BUILD_IMAGE_VERSION: 'v4.3.0'
  DOCKER_HOST: tcp://0.0.0.0:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ''
  MONGODB_HOST: mongodb.default.svc.cluster.local
  MONGODB_USER: scaly
  MONGODB_PW: scalypw

stages:
  - build
  # - test
  - deploy

build-job:
  stage: build
  image: 'registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image:${AUTO_BUILD_IMAGE_VERSION}'
  services:
    - name: 'docker:24.0.5-dind'
      command: ['--tls=false', '--host=tcp://0.0.0.0:2375']
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - /build/build.sh
  rules:
    - if: $CI_COMMIT_BRANCH == 'backend-local'
  artifacts:
    reports:
      dotenv: gl-auto-build-variables.env
    paths:
      - dist

# test-job:
#   TODO

deploy-helm:
  stage: deploy
  image: alpine/helm:3.9.0
  dependencies:
    - build-job
  environment:
    name: production
    url: https://your-production-url.example.com
  before_script:
    # Decode the base64-encoded kubeconfig from CI/CD variable and set it for kubectl/helm.
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
  script:
    - echo "Deploying the application using Helm upgrade --install..."
    - helm upgrade --install scalyshop-backend ./scalyshop-backend \
      --set image.repository="$CI_APPLICATION_REPOSITORY",image.tag="$CI_APPLICATION_TAG" \
  rules:
    - if: '$CI_COMMIT_BRANCH == "backend-local"'